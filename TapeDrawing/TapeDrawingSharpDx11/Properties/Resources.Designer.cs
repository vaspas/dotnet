//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.2012
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TapeDrawingSharpDx11.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TapeDrawingSharpDx11.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///struct PsIn
        ///{
        ///	float4 Position : SV_Position;
        ///	float2 TexCoord : TexCoord;
        ///};
        ///
        ///[Vertex shader]
        ///
        ///PsIn main(uint VertexID : SV_VertexID)
        ///{
        ///	// Produce a fullscreen triangle
        ///	PsIn Out;
        ///	Out.Position.x = (VertexID == 0)? 3.0f : -1.0f;
        ///	Out.Position.y = (VertexID == 2)? 3.0f : -1.0f;
        ///	Out.Position.zw = 1.0f;
        ///	Out.TexCoord = Out.Position.xy * float2(0.5f, -0.5f) + 0.5f;
        ///
        ///	return Out;
        ///}
        ///
        ///[Fragment shader]
        ///
        ///Texture2D BackBuffer;
        ///Texture2D &lt;float2&gt; GeometryBuffer;
        ///SamplerState Linear;
        ///Samp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gbaa {
            get {
                return ResourceManager.GetString("Gbaa", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///struct VS_IN
        ///{
        ///	float4 Position0 : POSITIONA;
        ///	float4 Position1 : POSITIONB;
        ///};
        ///
        ///struct PS_IN
        ///{
        ///	float4 Position : SV_Position;
        ///
        ///	// The parameters are constant across the line so use the nointerpolation attribute.
        ///	// This is not necessarily required, but using this we can make the vertex shader slightly shorter.
        ///	nointerpolation float4 KMF : KMF;
        ///};
        ///
        ///cbuffer buffer:register(b0)
        ///{
        ///
        ///float Width;
        ///float Height;
        ///float XFrom;
        ///float XTo;
        ///float YFrom;
        ///float YTo;
        ///float r1;
        ///float r2;
        ///flo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gpaa {
            get {
                return ResourceManager.GetString("Gpaa", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // -----------------------------------------------------------------------------
        ///// Original code from SlimDX project.
        ///// Greetings to SlimDX Group. Original code published with the following license:
        ///// -----------------------------------------------------------------------------
        ////*
        ///* Copyright (c) 2007-2011 SlimDX Group
        ///* 
        ///* Permission is hereby granted, free of charge, to any person obtaining a copy
        ///* of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///* in the Software [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Line {
            get {
                return ResourceManager.GetString("Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // -----------------------------------------------------------------------------
        ///// Original code from SlimDX project.
        ///// Greetings to SlimDX Group. Original code published with the following license:
        ///// -----------------------------------------------------------------------------
        ////*
        ///* Copyright (c) 2007-2011 SlimDX Group
        ///* 
        ///* Permission is hereby granted, free of charge, to any person obtaining a copy
        ///* of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///* in the Software [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiniTri {
            get {
                return ResourceManager.GetString("MiniTri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D picture;
        ///SamplerState pictureSampler;
        ///							
        ///struct VS_IN
        ///{
        ///	float2 TexCoord		: TEXCOORD;
        ///	float2 TexCoordSize	: TEXCOORDSIZE;
        ///	float4 Color		: COLOR;	
        ///	float2 TopLeft		: TOPLEFT;
        ///	float2 TopRight		: TOPRIGHT;
        ///	float2 BottomLeft	: BOTTOMLEFT;
        ///	float2 BottomRight	: BOTTOMRIGHT;
        ///};
        ///
        ///
        ///struct PS_IN
        ///{
        ///	float2 TexCoord : TEXCOORD;
        ///	float4 Color	: COLOR;
        ///	float4 Position : SV_POSITION;
        ///};
        ///
        ///
        ///cbuffer buffer:register(b0)
        ///{
        ///
        ///float Width;
        ///float Height;
        ///float XFrom;
        ///float XTo;
        ///fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SpriteShader {
            get {
                return ResourceManager.GetString("SpriteShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) 2010-2013 SharpDX - Alexandre Mutel
        ///// 
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the rights
        ///// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///// copies of the Software, and to permit persons to whom the Software is
        ///// furnished to do so, subject to the following condition [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Texture {
            get {
                return ResourceManager.GetString("Texture", resourceCulture);
            }
        }
    }
}
